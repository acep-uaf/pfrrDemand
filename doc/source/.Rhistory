source(../../demand_charge/power_plot.R)
source(../../demand_charge/power_plot.r)
source("../../demand_charge/power_plot.R")
day_plot("./data/tidy_downsampled.csv", "PQ", "month", "month", "day")
day_plot("../../demand_charge/data/tidy_downsampled.csv", "PQ", "month", "month", "day")
day_plot("../../demand_charge/data/tidy_downsampled.csv", "PQ", "month", "month", "day")
getwd()
day_plot("../../../demand_charge/data/tidy_downsampled.csv", "PQ", "month", "month", "day")
day_plot("../demand_charge/data/tidy_downsampled.csv", "PQ", "month", "month", "day")
day_plot("./tidy_downsampled.csv", "PQ", "month", "month", "day")
day_plot("tidy_downsampled.csv", "PQ", "month", "month", "day")
source("../../demand_charge/power_plot.R")
data_plot("tidy_downsampled.csv")
data_plot("./tidy_downsampled.csv")
mine <- function(num0, num1){nnn <- num0 + num1
return(nnn)}
min(1,2)
mine(1,2)
source("../../demand_charge/power_plot.R")
mine(1,2)
getwd()
source("../../demand_charge/power_plot.R")
data_plot("../../demand_charge/data/tidy_downsampled.csv")
data_plot("./data/tidy_downsampled.csv")
## convert original csv to a formated dataframem.
data_plot <- function(csv_path){
read_csv(file = csv_file) %>%
mutate_at(vars(c(-avr, -weekday, -index_m, -index_d)), as.factor) %>%
mutate(weekday = parse_factor(weekday, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")))
}
data_plot("./data/tidy_downsampled.csv")
## plot in terms of day
day_plot <- function(csv_path, meter_name, group_name, color_name, facet_name){
data_plot(csv_path) %>%
filter(meter == meter_name) %>%
ggplot(aes(x = index_d, y = avr, group = !!sym(group_name), color = !!sym(color_name))) +
geom_line() +
xlab("15 mins in a day") +
ylab("Power (kW)") +
ggtitle(paste0(meter_name, " - 15 mins demand charge power (kW)")) +
theme_bw() +
facet_wrap(vars(!!sym(facet_name))) +
theme_minimal(base_size = 14)
}
day_plot("./data/tidy_downsampled.csv", "PQ", "month", "month", "day")
data_plot("../../demand_charge/data/tidy_downsampled.csv")
## convert original csv to a formated dataframem.
data_plot <- function(csv_path){
read_csv(file = csv_file) %>%
mutate_at(vars(c(-avr, -weekday, -index_m, -index_d)), as.factor) %>%
mutate(weekday = parse_factor(weekday, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")))
}
data_plot("../../demand_charge/data/tidy_downsampled.csv")
## convert original csv to a formated dataframem.
data_plot <- function(csv_path){
read_csv(file = csv_file) %>%
mutate_at(vars(c(-avr, -weekday, -index_m, -index_d)), as.factor) %>%
mutate(weekday = parse_factor(weekday, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")))
}
data_plot("../../demand_charge/data/tidy_downsampled.csv")
## plot in terms of day
day_plot <- function(csv_path, meter_name, group_name, color_name, facet_name){
data_plot(csv_path) %>%
filter(meter == meter_name) %>%
ggplot(aes(x = index_d, y = avr, group = !!sym(group_name), color = !!sym(color_name))) +
geom_line() +
xlab("15 mins in a day") +
ylab("Power (kW)") +
ggtitle(paste0(meter_name, " - 15 mins demand charge power (kW)")) +
theme_bw() +
facet_wrap(vars(!!sym(facet_name))) +
theme_minimal(base_size = 14)
}
data_plot("./data/tidy_downsampled.csv")
## plot in terms of day
day_plot <- function(csv_path, meter_name, group_name, color_name, facet_name){
data_plot(csv_path) %>%
filter(meter == meter_name) %>%
ggplot(aes(x = index_d, y = avr, group = !!sym(group_name), color = !!sym(color_name))) +
geom_line() +
xlab("15 mins in a day") +
ylab("Power (kW)") +
ggtitle(paste0(meter_name, " - 15 mins demand charge power (kW)")) +
theme_bw() +
facet_wrap(vars(!!sym(facet_name))) +
theme_minimal(base_size = 14)
}
day_plot("./data/tidy_downsampled.csv", "PQ", "month", "month", "day")
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(pander)
library(stringr)
day_plot("./data/tidy_downsampled.csv", "PQ", "month", "month", "day")
## convert original csv to a formated dataframem.
data_plot <- function(csv_path){
read_csv(file = csv_path) %>%
mutate_at(vars(c(-avr, -weekday, -index_m, -index_d)), as.factor) %>%
mutate(weekday = parse_factor(weekday, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")))
}
## plot in terms of day
day_plot <- function(csv_path, meter_name, group_name, color_name, facet_name){
data_plot(csv_path) %>%
filter(meter == meter_name) %>%
ggplot(aes(x = index_d, y = avr, group = !!sym(group_name), color = !!sym(color_name))) +
geom_line() +
xlab("15 mins in a day") +
ylab("Power (kW)") +
ggtitle(paste0(meter_name, " - 15 mins demand charge power (kW)")) +
theme_bw() +
facet_wrap(vars(!!sym(facet_name))) +
theme_minimal(base_size = 14)
}
## plot in terms of month
month_plot <- function(csv_path, meter_name){
data_plot(csv_path) %>%
filter(meter == meter_name) %>%
ggplot(aes(x = index_m, y = avr, color = year)) +
geom_line() +
xlab("15 mins in a month") +
ylab("Power (kW)") +
ggtitle(paste0(meter_name, " - 15 mins demand charge power (kW)")) +
theme_bw() +
facet_wrap(~ month) +
theme_minimal(base_size = 14)
}
source("../../demand_charge/power_plot.R")
data_plot("../../demand_charge/data/tidy_downsampled.csv")
day_plot("../demand_charge/data/tidy_downsampled.csv", "PQ", "month", "month", "day")
day_plot("../../demand_charge/data/tidy_downsampled.csv", "PQ", "month", "month", "day")
day_plot("../../demand_charge/data/tidy_downsampled.csv", "PQ", "month", "month", "day")
day_plot("../../demand_charge/data/tidy_downsampled.csv", "PQ", "day", "month", "weekday")
day_plot("../../demand_charge/data/tidy_downsampled.csv", "PQ", "day", "year", "month")
month_plot("../../demand_charge/data/tidy_downsampled.csv", "PQ")
## plot in terms of day
day_plot <- function(data, meter_name, group_name, color_name, facet_name){
data %>%
filter(meter == meter_name) %>%
ggplot(aes(x = index_d, y = avr, group = !!sym(group_name), color = !!sym(color_name))) +
geom_line() +
xlab("15 mins in a day") +
ylab("Power (kW)") +
ggtitle(paste0(meter_name, " - 15 mins demand charge power (kW)")) +
theme_bw() +
facet_wrap(vars(!!sym(facet_name))) +
theme_minimal(base_size = 14)
}
## convert original csv to a formated dataframem.
data_plot <- function(csv_path){
read_csv(file = csv_path) %>%
mutate_at(vars(c(-avr, -weekday, -index_m, -index_d)), as.factor) %>%
mutate(weekday = parse_factor(weekday, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")))
}
data <- data_plot("./data/tidy_downsampled.csv")
data_plot("../../demand_charge/data/tidy_downsampled.csv")
data <- data_plot("../../demand_charge/data/tidy_downsampled.csv")
## plot in terms of day
day_plot <- function(data, meter_name, group_name, color_name, facet_name){
data %>%
filter(meter == meter_name) %>%
ggplot(aes(x = index_d, y = avr, group = !!sym(group_name), color = !!sym(color_name))) +
geom_line() +
xlab("15 mins in a day") +
ylab("Power (kW)") +
ggtitle(paste0(meter_name, " - 15 mins demand charge power (kW)")) +
theme_bw() +
facet_wrap(vars(!!sym(facet_name))) +
theme_minimal(base_size = 14)
}
day_plot(data, "PQ", "month", "month", "day")
source("../../demand_charge/power_plot.R")
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(pander)
library(stringr)
library(broom)
library(stringr)
library(kableExtra)
cor_reg("../../demand_charge/data/15m_downsampled.csv")
source("../../demand_charge/forecast.R")
source("../../demand_charge/forecast.R")
source("../../demand_charge/forecast.R")
cor_reg("../../demand_charge/data/15m_downsampled.csv")
install.packages("broom")
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(pander)
library(stringr)
library(kableExtra)
library(broom)
source("../../demand_charge/forecast.R")
source("../../demand_charge/forecast.R")
library(broom)
source("../../demand_charge/forecast.R")
## correlation plot and regression with respect to PQ
cor_reg <- function(data){
data <- xts::xts(read_csv(file = data)[,-1], order.by = read_csv(file = data)$time)
PQ = as.vector(data[,"PQ"])
Wat1 = as.vector(data[,"Wat1"])
Wat2 = as.vector(data[,"Wat2"])
Wat3 = as.vector(data[,"Wat3"])
rates <- data.frame(PQ, Wat1, Wat2, Wat3)
corrplot.mixed(cor(rates, use="pairwise.complete.obs"),upper="ellipse")
fit <- lm(PQ ~ Wat1+Wat2+Wat3)
summary(fit)
fit %>% broom::tidy() %>%
mutate_if(is.numeric, round, digits=2) %>%
kable(caption = "PQ power (kW) regression in Wat1, Wat2 and Wat3") %>%
kable_styling(bootstrap_options = c("striped", "hover","condensed"), full_width = T,
position = "center")
}
cor_reg("./data/15m_downsampled.csv")
cor_reg("../../demand_charge/data/15m_downsampled.csv")
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(pander)
library(stringr)
library(kableExtra)
library(broom)
source("../../demand_charge/forecast.R")
source("../../demand_charge/forecast.R")
cor_reg("../../demand_charge/data/15m_downsampled.csv")
plot(data, multi.panel=4, grid.ticks.lwd=0)
source("../../demand_charge/forecast.R")
data <- cor_reg("../../demand_charge/data/15m_downsampled.csv")
plot(data, multi.panel=4, grid.ticks.lwd=0)
source("../../demand_charge/forecast.R")
data <- cor_reg("../../demand_charge/data/15m_downsampled.csv")
data, fit <- cor_reg("../../demand_charge/data/15m_downsampled.csv")
data, fit <- cor_reg("../../demand_charge/data/15m_downsampled.csv")
c(data, fit) <- cor_reg("../../demand_charge/data/15m_downsampled.csv")
source("../../demand_charge/forecast.R")
data <- cor_reg("../../demand_charge/data/15m_downsampled.csv")[[1]]
fit <- cor_reg("../../demand_charge/data/15m_downsampled.csv")[[2]]
fit %>% tidy() %>%
mutate_if(is.numeric, round, digits=2) %>%
kable(caption = "PQ power (kW) regression in Wat1, Wat2 and Wat3") %>%
kable_styling(bootstrap_options = c("striped", "hover","condensed"), full_width = T,
position = "center")
peak_power("../../demand_charge/data/month_downsampled.csv", "PQ")
den_plot("../../demand_charge/data/month_downsampled.csv", "PQ")
arima_month("../../demand_charge/data/month_downsampled.csv", "PQ", 13)
cor_reg("../../demand_charge/data/15m_downsampled.csv")
source("../../demand_charge/forecast.R")
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(pander)
library(stringr)
library(kableExtra)
library(broom)
source("../../demand_charge/forecast.R")
data <- cor_reg("../../demand_charge/data/15m_downsampled.csv")[[1]]
fit <- cor_reg("../../demand_charge/data/15m_downsampled.csv")[[2]]
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(pander)
library(stringr)
library(kableExtra)
library(broom)
source("../../demand_charge/forecast.R")
data <- cor_reg("../../demand_charge/data/15m_downsampled.csv")[[1]]
library(forcats)
?forcats
read_csv(file = "../../demand_charge/data/charge_downsampled.csv") %>%
mutate(time = as.Date(time, format="%Y-%m-%d"))
read_csv(file = "../../demand_charge/data/charge_downsampled.csv")
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv")
## peak demand comparison
peak_compare <- function(data){
data %>%
ggplot(aes(x = time, y = total_v, color = "virtual meter")) +
geom_line() +
geom_line(aes(y = Tot_kw, color = "aggregated 4 meters"))+
scale_color_manual(name = "Peak power (kW):", values = c("virtual meter" = "red",
"aggregated 4 meters" = "blue"))+
scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +
xlab("Month (2017 - 2019)") +
ylab("Power (kW)") +
ggtitle("Montly peak demand (kW)") +
theme_bw() +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
peak_compare(data)
## density comparison
den_compare <- function(data){
d <- density(data$total_v, adjust = 1, na.rm = TRUE)
d_kw <- density(data$Tot_kw, adjust = 1, na.rm = TRUE)
plot(d, main="KDE for peak power (kW)", xlab='Power (kW)', col="red")
lines(d_kw, col="blue")
legend('topleft', legend=c("virtual meter", "aggregated 4 meters"),
col=c("red", "blue"), lty=1)
}
den_compare(data)
## create cost table
cost_table <- function(data){
ad_G2 = 30
kwh_G2 = 0.06256+0.09207
kw_G2 = 14.29
ad_G3 = 295
kwh_G3 = 0.0294+0.09207
kw_G3 = 22.86
chrg <- data %>%
mutate(charge_G2= Tot_kw*kw_G2 + Tot_kwh*kwh_G2 + ad_G2*4,
charge_G3= total_v*kw_G3 + Tot_kwh*kwh_G3 + ad_G3,
saving = charge_G2 - charge_G3)
return(chrg)
}
chrg <- cost_table(data)
## monthly energy consumption plot
energy_con_plot <- function(data){
chrg <- cost_table(data)
plot(chrg$time, chrg$Tot_kwh/1000, main="Monthly energy consumption (MWh)", type="l",
xlab='Month (2017 - 2019)', col="black", ylim=c(0,400), ylab="Power consumption (MWh)", xaxt="n")
lines(chrg$time,chrg$Wat1_e/1000, col="blue")
lines(chrg$time,chrg$PQ_e/1000, col="red")
lines(chrg$time,chrg$Wat3_e/1000, col="brown")
lines(chrg$time,chrg$Wat2_e/1000, col="gold")
axis.Date(side=1, at=chrg$time, labels=format(chrg$time, "%Y-%m"), srt = 45)
legend('topright', legend=c("Total", "Wat1","PQ","Wat3","Wat2"),
col=c("black","blue","red","brown","gold"), lty=1)
}
energy_con_plot(data)
## monthly bill plot
monthly_bill <- function(data){
cost_table(data) %>%
ggplot(aes(x = time, y = charge_G3/ 1000, color="A virtual meter")) +
geom_line() +
geom_line(aes(y = charge_G2/ 1000, color="4 meters")) +
geom_line(aes(y = saving/ 1000, color="Savings")) +
xlab("Monthly billing cycle (2017 - 2019)") +
ylab("Monthly charge ($1K)") +
theme_bw() +
theme_minimal(base_size = 14) +
scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +
scale_color_manual(name = "Elec. Cost:", values = c("A virtual meter" = "red","4 meters" = "blue",
"Savings" = "Gold"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Monthly electricity bill")
}
monthly_bill(data)
## saving distribution
saving_distribution <- function(data){
chrg <- cost_table(data)
d <- density(chrg$saving/ 1000, adjust = 1, na.rm = TRUE)
plot(d, main="KDE for savings ($1K) ", xlab='Savings ($1K)', col="red")
abline(v=mean(chrg$saving/1000), col="blue")
legend('topleft', legend=c("Savings", "Average savings"),
col=c("red", "blue"), lty=1)
}
saving_distribution(data)
arima_month <- function(data, meter_name, end_point){
dat <- data.frame(data) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), main= paste0(meter_name, " - ARIMA forecast"), col="blue",
xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(0:end_point + 10))
abline(v=c(end_point + 1, end_point + 3), col='red')
text(end_point + 2, mean(dat[[meter_name]])*1.5, "Prediction vs. Real")
}
arima_month(data, "PQ", 13)
library(forecast)
arima_month <- function(data, meter_name, end_point){
dat <- data.frame(data) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), main= paste0(meter_name, " - ARIMA forecast"), col="blue",
xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(0:end_point + 10))
abline(v=c(end_point + 1, end_point + 3), col='red')
text(end_point + 2, mean(dat[[meter_name]])*1.5, "Prediction vs. Real")
}
arima_month(data, "PQ", 13)
knitr::opts_chunk$set(echo = F ,message = F, warning = F, fig.height= 4, fig.width= 10)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(pander)
library(stringr)
library(kableExtra)
library(forecast)
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv")
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv")
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(pander)
library(stringr)
library(kableExtra)
library(forecast)
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv")
peak_compare(data)
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv")
peak_compare(data)
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv")
peak_compare(data)
source("../../demand_charge/charge.R")
peak_compare(data)
View(data)
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv")
View(data)
## peak demand comparison
peak_compare <- function(data){
data %>%
ggplot(aes(x = time, y = Virtual_meter, color = "virtual meter")) +
geom_line() +
geom_line(aes(y = Total_4meters, color = "aggregated 4 meters"))+
scale_color_manual(name = "Peak power (kW):", values = c("virtual meter" = "red",
"aggregated 4 meters" = "blue"))+
scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +
xlab("Month (2017 - 2019)") +
ylab("Power (kW)") +
ggtitle("Montly peak demand (kW)") +
theme_bw() +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
peak_compare(data)
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv") %>%
mutate(time = as.POSIXct(time, format="%m/%d/%Y %H:%M"))
read_csv(file = "../../demand_charge/data/charge_downsampled.csv") %>%
mutate(time = as.POSIXct(time, format="%m/%d/%Y %H:%M"))
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv") %>%
mutate(time = as.POSIXct(time, format="%m/%d/%Y"))
source("../../demand_charge/charge.R")
source("../../demand_charge/forecast.R")
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv") %>%
mutate(time = as.POSIXct(time, format="%m/%d/%Y"))
peak_compare(data)
## peak demand comparison
peak_compare <- function(data){
data %>%
ggplot(aes(x = time, y = Virtual_meter, color = "virtual meter")) +
geom_line() +
geom_line(aes(y = Total_4meters, color = "aggregated 4 meters"))+
scale_color_manual(name = "Peak power (kW):", values = c("virtual meter" = "red",
"aggregated 4 meters" = "blue"))+
scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +
xlab("Month (2017 - 2019)") +
ylab("Power (kW)") +
ggtitle("Montly peak demand (kW)") +
theme_bw() +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv") %>% mutate(time = as.POSIXct(time, format="%m/%d/%Y"))
peak_compare(data)
View(data)
## peak demand comparison
peak_compare <- function(data){
data %>%
ggplot(aes(x = time, y = Virtual_meter, color = "virtual meter")) +
geom_line() +
geom_line(aes(y = Total_4meters, color = "aggregated 4 meters"))+
scale_color_manual(name = "Peak power (kW):", values = c("virtual meter" = "red",
"aggregated 4 meters" = "blue"))+
scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +
xlab("Month (2017 - 2019)") +
ylab("Power (kW)") +
ggtitle("Montly peak demand (kW)") +
theme_bw() +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
peak_compare(data)
data <- read_csv(file = "../../demand_charge/data/charge_downsampled.csv") %>% mutate(time = as.Date(time, format="%m/%d/%Y"))
peak_compare(data)
read_csv(file = "../../demand_charge/data/Rate.csv") %>%
kable(caption = "Rate schedule") %>%
kable_styling(bootstrap_options = c("striped", "hover","condensed"), full_width = T,
position = "center")
read_csv(file = "../../demand_charge/data/charge_rate.csv") %>%
kable(caption = "Rate schedule") %>%
kable_styling(bootstrap_options = c("striped", "hover","condensed"), full_width = T,
position = "center")
