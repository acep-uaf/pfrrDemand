data = "./data/15m_downsampled.csv"
read_csv(file = data)[,-1]
# This module contains code for the peak demand forecast.
## Import
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(stringr)
library(broom)
library(kableExtra)
library('quantmod')
library(corrplot)
data <- xts::xts(read_csv(file = data)[,-1], order.by = read_csv(file = data)$time)
data <- read_csv(file = data)
data <- xts::xts(read_csv(file = data)[,-1], order.by = read_csv(file = data)$time)
View(data)
## correlation plot and regression with respect to PQ
cor_reg <- function(data){
data <- xts::xts(read_csv(file = data)[,-1], order.by = read_csv(file = data)$time)
PQ = as.vector(data[,"PQ"])
Wat1 = as.vector(data[,"Wat1"])
Wat2 = as.vector(data[,"Wat2"])
Wat3 = as.vector(data[,"Wat3"])
rates <- data.frame(PQ, Wat1, Wat2, Wat3)
corrplot.mixed(cor(rates, use="pairwise.complete.obs"),upper="ellipse")
fit <- lm(PQ ~ Wat1+Wat2+Wat3)
summary(fit)
fit %>% tidy() %>%
mutate_if(is.numeric, round, digits=2) %>%
kable(caption = "PQ power (kW) regression in Wat1, Wat2 and Wat3") %>%
kable_styling(bootstrap_options = c("striped", "hover","condensed"), full_width = T,
position = "center")
}
cor_reg("./data/15m_downsampled.csv")
peak_power <- function(month_csv, meter_name){
read_csv(file = month_csv) %>%
ggplot(aes(x = time, y = !!sym(meter_name))) +
geom_line(color="blue") +
scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +
xlab("Month (2017 - 2019)") +
ylab("Power (kW)") +
ggtitle("PQ demand charge power (kW)") +
theme_bw() +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
peak_power(".data/month_downsampled.csv", "PQ")
peak_power("./data/month_downsampled.csv", "PQ")
peak_power <- function(csv_path, meter_name){
read_csv(file = csv_path) %>%
ggplot(aes(x = time, y = !!sym(meter_name))) +
geom_line(color="blue") +
scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +
xlab("Month (2017 - 2019)") +
ylab("Power (kW)") +
ggtitle(paste0(meter_name, " - demand charge power (kW)")) +
theme_bw() +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
peak_power("./data/month_downsampled.csv", "PQ")
csv_path
csv_path = "./data/month_downsampled.csv"
data <- read_csv(file = csv_path)
data$PQ
meter_name = "PQ"
!!sym(meter_name)
d <- density(data$!!sym(meter_name), adjust = 1, na.rm = TRUE)
d <- density(data$(!!sym(meter_name)), adjust = 1, na.rm = TRUE)
d <- density(data[[meter_name]], adjust = 1, na.rm = TRUE)
plot(d, main="KDE for PQ power (kW)", xlab='Power (kW)', col="red") # simple plot
data[[meter_name]]
den_plot <- function(csv_path, meter_name){
data <- read_csv(file = csv_path)
d <- density(data[[meter_name]], adjust = 1, na.rm = TRUE)
plot(d, main=paste0("KDE for", meter_name, "power (kW)"), xlab='Power (kW)', col="red") # simple plot
}
den_plot <- function(csv_path, meter_name){
data <- read_csv(file = csv_path)
d <- density(data[[meter_name]], adjust = 1, na.rm = TRUE)
plot(d, main=paste0("KDE for", meter_name, "power (kW)"), xlab='Power (kW)', col="red") # simple plot
}
den_plot("./data/month_downsampled.csv", "PQ")
den_plot <- function(csv_path, meter_name){
data <- read_csv(file = csv_path)
d <- density(data[[meter_name]], adjust = 1, na.rm = TRUE)
plot(d, main=paste0("KDE for ", meter_name, " power (kW)"), xlab='Power (kW)', col="red") # simple plot
}
den_plot("./data/month_downsampled.csv", "PQ")
arima_for <- function(csv_path, meter_name, end_month){
dat <- data.frame(read_csv(file = csv_path)) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_month], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(0:23))
abline(v=c(end_month + 1, end_month + 3), col='red')
text(15, -50, "Prediction vs. Real")
}
arima_for("./data/month_downsampled.csv", "PQ", 13)
library(forecast)
arima_for("./data/month_downsampled.csv", "PQ", 13)
arima_day <- function(csv_path, meter_name, end_point){
dat <- data.frame(read_csv(file = csv_path)) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(seq(0, end_point+12, by=25)))
abline(v=c(end_point + 1, end_point + 10), col='red')
text(350, 220, "Prediction vs. Real")
}
arima_day("./data/day_downsampled.csv", "PQ", 404)
arima_day("./data/day_downsampled.csv", "PQ", 404)
arima_day <- function(csv_path, meter_name, end_point){
dat <- data.frame(read_csv(file = csv_path)) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(seq(0, end_point+12, by=25)))
abline(v=c(end_point, end_point + 10), col='red')
text(350, 220, "Prediction vs. Real")
}
arima_day("./data/day_downsampled.csv", "PQ", 404)
arima_day <- function(csv_path, meter_name, end_point){
dat <- data.frame(read_csv(file = csv_path)) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(seq(0, end_point+12, by=25)))
abline(v=c(end_point + 1, end_point + 9), col='red')
text(350, 220, "Prediction vs. Real")
}
arima_day("./data/day_downsampled.csv", "PQ", 404)
arima_day <- function(csv_path, meter_name, end_point){
dat <- data.frame(read_csv(file = csv_path)) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(seq(0, end_point+12, by=25)))
abline(v=c(end_point + 1, end_point + 10), col='red')
text(350, 220, "Prediction vs. Real")
}
arima_day("./data/day_downsampled.csv", "PQ", 404)
arima_month <- function(csv_path, meter_name, end_point){
dat <- data.frame(read_csv(file = csv_path)) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(0:end_point + 10))
abline(v=c(end_point + 1, end_point + 3), col='red')
text(end_point + 2, mean(dat[[meter_name]]), "Prediction vs. Real")
}
arima_for("./data/month_downsampled.csv", "PQ", 13)
meter_name
dat
csv_path
dat <- data.frame(read_csv(file = csv_path)) %>%
drop_na()
dat[[meter_name]]
mean(dat[[meter_name]])
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
end_point = 13
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(0:end_point + 10))
abline(v=c(end_point + 1, end_point + 3), col='red')
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(0:end_point + 10))
abline(v=c(end_point + 1, end_point + 3), col='red')
text(end_point + 2, mean(dat[[meter_name]]), "Prediction vs. Real")
arima_month <- function(csv_path, meter_name, end_point){
dat <- data.frame(read_csv(file = csv_path)) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(0:end_point + 10))
abline(v=c(end_point + 1, end_point + 3), col='red')
text(end_point + 2, mean(dat[[meter_name]])*1.5, "Prediction vs. Real")
}
arima_for("./data/month_downsampled.csv", "PQ", 13)
arima_month("./data/month_downsampled.csv", "PQ", 13)
arima_day("./data/day_downsampled.csv", "PQ", 404)
arima_day <- function(csv_path, meter_name, end_point){
dat <- data.frame(read_csv(file = csv_path)) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(seq(0, end_point+12, by=25)))
abline(v=c(end_point + 1, end_point + 10), col='red')
text(end_point + 10, mean(dat[[meter_name]])*1.5, "Prediction vs. Real")
}
arima_day("./data/day_downsampled.csv", "PQ", 404)
arima_day <- function(csv_path, meter_name, end_point){
dat <- data.frame(read_csv(file = csv_path)) %>%
drop_na()
fit <- auto.arima(dat[[meter_name]][1:end_point], max.p = 20, max.q = 20, max.d = 2, ic = "aic")
plot(forecast(fit), col="blue", xlab="Ordinal month since Nov. 2017", ylab="Power (kW)")
lines(dat[[meter_name]], col="brown")
axis(side=1, at=c(seq(0, end_point+12, by=25)))
abline(v=c(end_point + 1, end_point + 10), col='red')
text(end_point - 50, mean(dat[[meter_name]])*1.5, "Prediction vs. Real")
}
arima_day("./data/day_downsampled.csv", "PQ", 404)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(pander)
library(stringr)
library(kableExtra)
data <- read_csv(file = "filled.csv") %>%
mutate(time = as.POSIXct(time, format="%m/%d/%Y %H:%M"))
data <- read_csv(file = "filled.csv") %>%
mutate(time = as.POSIXct(time, format="%m/%d/%Y %H:%M"))
data["year"] <- year(data[["time"]])
data["month"] <- month(data[["time"]])
data <- data %>%
group_by(year, month) %>%
summarise(PQ_e = sum(PQ,na.rm=T)/60, Wat1_e = sum(Wat1,na.rm=T)/60, Wat2_e = sum(Wat2,na.rm=T)/60,
Wat3_e = sum(Wat3,na.rm=T)/60, Tot_kwh = PQ_e+Wat1_e+Wat2_e+Wat3_e) %>%
mutate(month_ = sprintf("%02d", month),
time = ymd(str_c(year, month_,"01"))) %>%
select(time, PQ_e, Wat1_e, Wat2_e, Wat3_e, Tot_kwh)
pwr <- data[c(-1)]
data <- read_csv(file = "15m_filled.csv") %>%
drop_na() %>%
mutate(total_v = PQ+Wat1+Wat2+Wat3)
data["year"] <- year(data[["time"]])
data["month"] <- month(data[["time"]])
data["day"] <- day(data[["time"]])
data["hour"] <- hour(data[["time"]])
data["minute"] <- minute(data[["time"]])
data <- data %>%
group_by(year, month) %>%
summarise(PQ = max(PQ,na.rm=T), Wat1 = max(Wat1,na.rm=T), Wat2 = max(Wat2,na.rm=T),
Wat3 = max(Wat3,na.rm=T), total_v = max(total_v, na.rm=T), Tot_kw = PQ+Wat1+Wat2+Wat3) %>%
mutate(month_ = sprintf("%02d", month),
time = ymd(str_c(year, month_, "01"))) %>%
select(time, PQ, Wat1, Wat2, Wat3, total_v, Tot_kw)
dmd <- data[c(-1)]
data <- dmd %>% inner_join(pwr, by="time")
getwd()
write_csv(data, path = "./charge.csv" )
peak_compare <- function(csv_path){
read_csv(file = csv_path) %>%
mutate(time = as.POSIXct(time, format="%m/%d/%Y %H:%M")) %>%
ggplot(aes(x = time, y = total_v, color = "virtual meter")) +
geom_line() +
geom_line(aes(y = Tot_kw, color = "aggregated 4 meters"))+
scale_color_manual(name = "Peak power (kW):", values = c("virtual meter" = "red",
"aggregated 4 meters" = "blue"))+
scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +
xlab("Month (2017 - 2019)") +
ylab("Power (kW)") +
ggtitle("Montly peak demand (kW)") +
theme_bw() +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
peak_compare("./data/charge_downsampled.csv")
csv_path = "./data/charge_downsampled.csv"
read_csv(file = csv_path)
peak_compare <- function(csv_path){
read_csv(file = csv_path) %>%
mutate(time = as.Date(time, format="%Y-%m-%d")) %>%
ggplot(aes(x = time, y = total_v, color = "virtual meter")) +
geom_line() +
geom_line(aes(y = Tot_kw, color = "aggregated 4 meters"))+
scale_color_manual(name = "Peak power (kW):", values = c("virtual meter" = "red",
"aggregated 4 meters" = "blue"))+
scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +
xlab("Month (2017 - 2019)") +
ylab("Power (kW)") +
ggtitle("Montly peak demand (kW)") +
theme_bw() +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
peak_compare("./data/charge_downsampled.csv")
## density comparison
den_compare <- function(csv_path){
data <- read_csv(file = csv_path) %>%
mutate(time = as.Date(time, format="%Y-%m-%d"))
d <- density(data$total_v, adjust = 1, na.rm = TRUE)
d_kw <- density(data$Tot_kw, adjust = 1, na.rm = TRUE)
plot(d, main="KDE for peak power (kW)", xlab='Power (kW)', col="red")
lines(d_kw, col="blue")
legend('topleft', legend=c("virtual meter", "aggregated 4 meters"),
col=c("red", "blue"), lty=1)
}
den_compare("./data/charge_downsampled.csv")
## create cost table
cost_table <- function(csv_path){
data <- read_csv(file = csv_path) %>%
mutate(time = as.Date(time, format="%Y-%m-%d"))
ad_G2 = 30
kwh_G2 = 0.06256+0.09207
kw_G2 = 14.29
ad_G3 = 295
kwh_G3 = 0.0294+0.09207
kw_G3 = 22.86
chrg <- data %>%
mutate(charge_G2= Tot_kw*kw_G2 + Tot_kwh*kwh_G2 + ad_G2*4,
charge_G3= total_v*kw_G3 + Tot_kwh*kwh_G3 + ad_G3,
saving = charge_G2 - charge_G3)
return(chrg)
}
chrg <- cost_table("./data/charge_downsampled.csv")
chrg
energy_con_plot <- function(csv_path){
chrg <- cost_table("./data/charge_downsampled.csv")
plot(chrg$time, chrg$Tot_kwh/1000, main="Monthly energy consumption (MWh)", type="l",
xlab='Month (2017 - 2019)', col="black", ylim=c(0,400), ylab="Power consumption (MWh)", xaxt="n")
lines(chrg$time,chrg$Wat1_e/1000, col="blue")
lines(chrg$time,chrg$PQ_e/1000, col="red")
lines(chrg$time,chrg$Wat3_e/1000, col="brown")
lines(chrg$time,chrg$Wat2_e/1000, col="gold")
axis.Date(side=1, at=chrg$time, labels=format(chrg$time, "%Y-%m"), srt = 45)
legend('topright', legend=c("Total", "Wat1","PQ","Wat3","Wat2"),
col=c("black","blue","red","brown","gold"), lty=1)
}
energy_con_plot("./data/charge_downsampled.csv")
energy_con_plot <- function(csv_path){
chrg <- cost_table("./data/charge_downsampled.csv")
plot(chrg$time, chrg$Tot_kwh/1000, main="Monthly energy consumption (MWh)", type="l",
xlab='Month (2017 - 2019)', col="black", ylim=c(0,400), ylab="Power consumption (MWh)", xaxt="n")
lines(chrg$time,chrg$Wat1_e/1000, col="blue")
lines(chrg$time,chrg$PQ_e/1000, col="red")
lines(chrg$time,chrg$Wat3_e/1000, col="brown")
lines(chrg$time,chrg$Wat2_e/1000, col="gold")
axis.Date(side=1, at=chrg$time, labels=format(chrg$time, "%Y-%m"), srt = 45)
legend('topright', legend=c("Total", "Wat1","PQ","Wat3","Wat2"),
col=c("black","blue","red","brown","gold"), lty=1)
}
energy_con_plot("./data/charge_downsampled.csv")
## monthly bill plot
monthly_bill <- function(csv_path){
cost_table("./data/charge_downsampled.csv") %>%
ggplot(aes(x = time, y = charge_G3/ 1000, color="A virtual meter")) +
geom_line() +
geom_line(aes(y = charge_G2/ 1000, color="4 meters")) +
geom_line(aes(y = saving/ 1000, color="Savings")) +
xlab("Monthly billing cycle (2017 - 2019)") +
ylab("Monthly charge ($1K)") +
theme_bw() +
theme_minimal(base_size = 14) +
scale_x_date(date_breaks = "1 month", date_labels = "%Y-%m") +
scale_color_manual(name = "Elec. Cost:", values = c("A virtual meter" = "red","4 meters" = "blue",
"Savings" = "Gold"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Monthly electricity bill")
}
monthly_bill("./data/charge_downsampled.csv")
}
saving_distribution <- function(csv_path){
chrg <- cost_table("./data/charge_downsampled.csv")
d <- density(chrg$saving/ 1000, adjust = 1, na.rm = TRUE)
plot(d, main="KDE for savings ($1K) ", xlab='Savings ($1K)', col="red")
abline(v=mean(chrg$saving/1000), col="blue")
legend('topleft', legend=c("Savings", "Average savings"),
col=c("red", "blue"), lty=1)
}
saving_distribution("./data/charge_downsampled.csv")
library(devtools)
devtools::install_github("klutometis/roxygen")
library(roxygen2)
devtools::install_github("klutometis/roxygen")
library(roxygen2)
devtools::install_github("klutometis/roxygen")
library(roxygen2)
install.packages("roxygen2")
saving_distribution("./data/charge_downsampled.csv")
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(pander)
library(stringr)
source(../../demand_charge/power_plot.R)
getwd()
